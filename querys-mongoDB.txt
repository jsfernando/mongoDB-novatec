db é atalho para dizer qual banco Eu estou...
use novatec => abri o banco
show collections => quais collections eu tenho

Inseri uma collections (books)
db.books.insert({name:'Introdução ao MongoDB'})
WriteResult({ "nInserted" : 1 })

id hash de 24 caracteres ... um hexadecimal de a-f

db.books.findOne()
{
        "_id" : ObjectId("59eb3a2a3933d20fef953df2"),
        "name" : "Introdução ao MongoDB"
}

> db.books.insert({name:'jQuery', author:'Maujor', pages: 260 })
WriteResult({ "nInserted" : 1 })

> db.books.count() // quantidade de documentos
10

db.books.find() // pesquisa de todos os documentos na collection

lista bonitinho
> db.books.find().pretty()
{
        "_id" : ObjectId("59eb3a2a3933d20fef953df2"),
        "name" : "Introdução ao MongoDB"
}
{
        "_id" : ObjectId("59eb3bd43933d20fef953df3"),
        "name" : "Game of Thrones",
        "pages" : 1792
}

db.books.find({ name: '1984'}) // encontrar um registro ==, não é like... case sensitive

> db.books.find({ name: 'O pequeno principe'})
{ "_id" : ObjectId("59eb3c123933d20fef953df6"), "name" : "O pequeno principe", "pages" : 250 }
> db.books.find({ name: 'O Pequeno Principe'}) // esse nao tem pois a pesquisa é igual ==
>

Query com OR
> var obj = { $or: [{ pages: 250, name: 'O pequeno principe'}, { pages:25 }] }
> db.books.find(obj)
{ "_id" : ObjectId("59eb3c123933d20fef953df6"), "name" : "O pequeno principe", "pages" : 250 }
{ "_id" : ObjectId("59eb3c273933d20fef953df7"), "name" : "Poemas Mário de Andrade", "pages" : 25 }
>

db.books.find( {_id: ObjectId("59eb3c123933d20fef953df6") } )

Query com AND = a virgula
> db.books.find({ pages: 250, name: 'O pequeno principe'})
{ "_id" : ObjectId("59eb3c123933d20fef953df6"), "name" : "O pequeno principe", "pages" : 250 }

//Inserindo vários registros de uma vez... com array
> var arr = []
> arr.push ({ pages: 25, name: "HTML5"})
1
> arr.push ({ pages: 25, name: "CSS3"})
2
> arr
[
        {
                "pages" : 25,
                "name" : "HTML5"
        },
        {
                "pages" : 25,
                "name" : "CSS3"
        }
]
> db.books.insert(arr)
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
>

Remover pelo atributo
db.books.remove({pages:25})

db.books.remove({}) // apaga todos os documentos da collection
depois do .remove a collection ainda fica

drop.db.books() apagar a collection

db.books.find({ name: /[0-9]/}) // like com ReGex ... com expressão regulares

> db.books.find({ name: /[0-9]/}) // todos que tenham número
{ "_id" : ObjectId("59eb3bfd3933d20fef953df5"), "name" : "1984", "pages" : 184 }
{ "_id" : ObjectId("59eb48283933d20fef953dfd"), "pages" : 25, "name" : "HTML5" }
{ "_id" : ObjectId("59eb48283933d20fef953dfe"), "pages" : 25, "name" : "CSS3" }
>



db.books.find({ name: /^[0-9]/}) // começa com número
db.books.find({ name: /[0-9]$/}) // termina com número
> db.books.find({ name: /^[0-9]/})
{ "_id" : ObjectId("59eb3bfd3933d20fef953df5"), "name" : "1984", "pages" : 184 }
> db.books.find({ name: /[0-9]$/})
{ "_id" : ObjectId("59eb3bfd3933d20fef953df5"), "name" : "1984", "pages" : 184 }
{ "_id" : ObjectId("59eb48283933d20fef953dfd"), "pages" : 25, "name" : "HTML5" }
{ "_id" : ObjectId("59eb48283933d20fef953dfe"), "pages" : 25, "name" : "CSS3" }
>

> db.books.find({ name: /^[0-9]+$/})
{ "_id" : ObjectId("59eb3bfd3933d20fef953df5"), "name" : "1984", "pages" : 184 }

ReGex
^ - começo
$ - final
/[0-9]/
/[a-zA-Z0-9]/
/[a-z][A-Z][0-9]/


/a?[0-9]/ => a1 ou 1 ==> o interrogação é opcional

/[0-9]{4,6}/ == 1234, 123456, (123 não)

/./ == qualquer coisa

/.*/ == qualquer coisa (*) com qualquer quantidade

/.+/ == quaquer coisa em pelo menos 1 quantidade

/[a-z]*[A-Z]+[0-9]{3,}/

/^[0-9]$/    
/^[0-9]+$/ == começa e termina com número, com pelo menos 1 quantidade de retorno...


> db.books.find({ name: /^o/}) // comece com "o" minúsculo

> db.books.find({ name: /^o/i}) // tenha "o" minúsculo
{ "_id" : ObjectId("59eb3c123933d20fef953df6"), "name" : "O pequeno principe", "pages" : 250 }

db.books.count({pages: {$gte:100}) // $gte >= maior que

gte = greather than or equal
lte = less


> db.books.count( {pages: {$gte:100} })
9
> db.books.count( {pages: {$gte: 25} })
13
> db.books.count( {pages: {$gt: 25} })
9
> db.books.count( {pages: {$lte: 25} })
4
> db.books.count( {pages: {$lt: 25} })
0

Update encontrando o name: "Introdução ao MongoDB" e inserindo o author: 'Peter', mas perdeu o name


> db.books.findOne()
{
        "_id" : ObjectId("59eb3a2a3933d20fef953df2"),
        "name" : "Introdução ao MongoDB"
}
> db.books.update( {name:"Introdução ao MongoDB"}, {author: 'Peter' })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.books.findOne()
{ "_id" : ObjectId("59eb3a2a3933d20fef953df2"), "author" : "Peter" }
>

//Modificador $set
// alterando somente o atributdo específico

db.books.update({author:'Peter'}, {$set: {name:'Introdução ao MongoDB'}} )

> db.books.update({author:'Peter'}, {$set: {name:'Introdução ao MongoDB'}} )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.books.findOne()
{
        "_id" : ObjectId("59eb3a2a3933d20fef953df2"),
        "author" : "Peter",
        "name" : "Introdução ao MongoDB"
}
>


//Alterar atributo author para Author $rename
db.books.update( {author:'Peter'}, {$rename: {'author': 'Author'} } )

> db.books.update( {author:'Peter'}, {$rename: {'author': 'Author'} } )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.books.findOne()
{
        "_id" : ObjectId("59eb3a2a3933d20fef953df2"),
        "name" : "Introdução ao MongoDB",
        "Author" : "Peter"
}
>


Update com multi:true

> var arr = []
> arr.push( { name: 'Novatec1', author: 'Carol' })
1
> arr.push( { name: 'Novatec2', author: 'Carol' })
2
> arr.push( { name: 'Novatec3', author: 'Rubens' })
3
> db.books.insert(arr)
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 3,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
>
db.books.update({author: 'Carol'}, {$set: {pages: 178} })
db.books.update({author: 'Carol'}, {$set: {pages: 178} }, {multi: true})

db.books.update({name: /Novatec/}, {$set: {pages: 178} }, {multi: true})

incremento
db.books.update({name: /Novatec/}, {$inc: {pages: 178} }, {multi: true})

> db.books.update({name: /Novatec/}, {$set: {pages: 178} }, {multi: true})
WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 })

> db.books.find({name: /Novatec/})
{ "_id" : ObjectId("59eb52f63933d20fef953dff"), "name" : "Novatec1", "author" : "Carol", "pages" : 178 }
{ "_id" : ObjectId("59eb52f63933d20fef953e00"), "name" : "Novatec2", "author" : "Carol", "pages" : 178 }
{ "_id" : ObjectId("59eb52f63933d20fef953e01"), "name" : "Novatec3", "author" : "Rubens", "pages" : 178 }
>

> db.books.update({name: /Novatec/}, {$inc: {pages: 178} }, {multi: true})
WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 })
> db.books.find({name: /Novatec/})
{ "_id" : ObjectId("59eb52f63933d20fef953dff"), "name" : "Novatec1", "author" : "Carol", "pages" : 356 }
{ "_id" : ObjectId("59eb52f63933d20fef953e00"), "name" : "Novatec2", "author" : "Carol", "pages" : 356 }
{ "_id" : ObjectId("59eb52f63933d20fef953e01"), "name" : "Novatec3", "author" : "Rubens", "pages" : 356 }

db.books.find({name:/Novatec/}, {_id: 0, name:1, pages:1})
// Mostrar somente name e pages e não mostrar _id
> db.books.find({name:/Novatec/}, {_id: 0, name:1, pages:1})
{ "name" : "Novatec1", "pages" : 356 }
{ "name" : "Novatec2", "pages" : 356 }
{ "name" : "Novatec3", "pages" : 356 }

ou
db.books.find({name:/Novatec/}, {_id: false, name:true, pages:true})

> db.books.insert({name:'Poemas', releaseDate: new Date()})
WriteResult({ "nInserted" : 1 })
> db.books.find({name: /Poemas/})
{ "_id" : ObjectId("59eb3c273933d20fef953df7"), "name" : "Poemas Mário de Andrade", "pages" : 25 }
{ "_id" : ObjectId("59eb564c3933d20fef953e02"), "name" : "Poemas", "releseDate" : ISODate("2017-10-21T14:14:36.868Z") }

//releaseDate está escrito correto...
> db.books.find({name: /Poemas/})
{ "_id" : ObjectId("59eb3c273933d20fef953df7"), "name" : "Poemas Mário de Andrade", "pages" : 25 }
{ "_id" : ObjectId("59eb564c3933d20fef953e02"), "name" : "Poemas", "releseDate" : ISODate("2017-10-21T14:14:36.868Z") }
{ "_id" : ObjectId("59eb56a13933d20fef953e03"), "name" : "Poemas", "releaseDate" : ISODate("2017-10-21T14:16:01.420Z") }
>

db.books.remove({releseDate})


// Inserindo um documento com um array dentro

> db.books.insert( {name: 'Contos', authors:['Peter', 'David', 'Will'] } )
WriteResult({ "nInserted" : 1 })
Pequisa do contos
> db.books.find({name:'Contos'})
{ "_id" : ObjectId("59eb58063933d20fef953e04"), "name" : "Contos", "authors" : [ "Peter", "David", "Will" ] }
> db.books.find({name:'Contos'})
{ "_id" : ObjectId("59eb58063933d20fef953e04"), "name" : "Contos", "authors" : [ "Peter", "David", "Will" ] }


db.books.findOne({ releaseDate: { $exists:1}})

//encontrar um campo releaseDate
> db.books.findOne({ releaseDate: { $exists:1}})
{
        "_id" : ObjectId("59eb56a13933d20fef953e03"),
        "name" : "Poemas",
        "releaseDate" : ISODate("2017-10-21T14:16:01.420Z")
}
> db.books.findOne({ releseDate: { $exists:1}})
{
        "_id" : ObjectId("59eb564c3933d20fef953e02"),
        "name" : "Poemas",
        "releseDate" : ISODate("2017-10-21T14:14:36.868Z")
}
> db.books.findOne({ releseDate: { $exists:0}})
{
        "_id" : ObjectId("59eb3a2a3933d20fef953df2"),
        "name" : "Introdução ao MongoDB",
        "Author" : "Peter"
}
> db.books.findOne({ releaseDate: { $exists:0}})
{
        "_id" : ObjectId("59eb3a2a3933d20fef953df2"),
        "name" : "Introdução ao MongoDB",
        "Author" : "Peter"
}
>

db.books.update({ name:'Contos'}, {$unset: {releaseDate: 1 } })

// apaguei um atribudo de um registro que contenha um atributo escrito errado

> db.books.find({name: /Poemas/})
{ "_id" : ObjectId("59eb3c273933d20fef953df7"), "name" : "Poemas Mário de Andrade", "pages" : 25 }
{ "_id" : ObjectId("59eb564c3933d20fef953e02"), "name" : "Poemas", "releseDate" : ISODate("2017-10-21T14:14:36.868Z") }
{ "_id" : ObjectId("59eb56a13933d20fef953e03"), "name" : "Poemas", "releaseDate" : ISODate("2017-10-21T14:16:01.420Z") }
>

> db.books.update({ name:'Poemas'}, {$unset: {releseDate: 1 } })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.books.find()
{ "_id" : ObjectId("59eb564c3933d20fef953e02"), "name" : "Poemas" }
{ "_id" : ObjectId("59eb56a13933d20fef953e03"), "name" : "Poemas", "releaseDate" : ISODate("2017-10-21T14:16:01.420Z") }
>


// paginação

> db.books.find()
{ "_id" : ObjectId("59eb3a2a3933d20fef953df2"), "name" : "Introdução ao MongoDB", "Author" : "Peter" }
{ "_id" : ObjectId("59eb3bd43933d20fef953df3"), "name" : "Game of Thrones", "pages" : 1792 }
{ "_id" : ObjectId("59eb3bea3933d20fef953df4"), "name" : "Senhor dos Anéis", "pages" : 670 }
{ "_id" : ObjectId("59eb3bfd3933d20fef953df5"), "name" : "1984", "pages" : 184 }
{ "_id" : ObjectId("59eb3c123933d20fef953df6"), "name" : "O pequeno principe", "pages" : 250 }
{ "_id" : ObjectId("59eb3c273933d20fef953df7"), "name" : "Poemas Mário de Andrade", "pages" : 25 }
{ "_id" : ObjectId("59eb3c3c3933d20fef953df8"), "name" : "A Arte da Guerra", "pages" : 100 }
{ "_id" : ObjectId("59eb3c5d3933d20fef953df9"), "name" : "Como programar para iOS", "author" : "Steve Jobs", "pages" : 560 }
{ "_id" : ObjectId("59eb3c903933d20fef953dfa"), "name" : "JSON", "author" : "Novatec", "pages" : 160 }
{ "_id" : ObjectId("59eb3ca43933d20fef953dfb"), "name" : "jQuery", "author" : "Maujor", "pages" : 260 }
{ "_id" : 42, "name" : "jQuery Mobile", "author" : "Maujor", "pages" : 360 }
{ "_id" : ObjectId("59eb475d3933d20fef953dfc"), "name" : "jQuery Ajax", "author" : "Maujor", "pages" : 25 }
{ "_id" : ObjectId("59eb48283933d20fef953dfd"), "pages" : 25, "name" : "HTML5" }
{ "_id" : ObjectId("59eb48283933d20fef953dfe"), "pages" : 25, "name" : "CSS3" }
{ "_id" : ObjectId("59eb52f63933d20fef953dff"), "name" : "Novatec1", "author" : "Carol", "pages" : 356 }
{ "_id" : ObjectId("59eb52f63933d20fef953e00"), "name" : "Novatec2", "author" : "Carol", "pages" : 356 }
{ "_id" : ObjectId("59eb52f63933d20fef953e01"), "name" : "Novatec3", "author" : "Rubens", "pages" : 356 }
{ "_id" : ObjectId("59eb564c3933d20fef953e02"), "name" : "Poemas" }
{ "_id" : ObjectId("59eb56a13933d20fef953e03"), "name" : "Poemas", "releaseDate" : ISODate("2017-10-21T14:16:01.420Z") }
{ "_id" : ObjectId("59eb58063933d20fef953e04"), "name" : "Contos", "authors" : [ "Peter", "David", "Will" ] }
>

db.books.find({},{_id:0, name:1}).limit(2).skip(2)

> db.books.find({},{_id:0, name:1}).limit(2).skip(2)
{ "name" : "Senhor dos Anéis" }
{ "name" : "1984" }
>

db.books.find({},{_id:0, name:1}).limit(2).skip(2*2)

> db.books.find({},{_id:0, name:1}).limit(2).skip(2*2)
{ "name" : "O pequeno principe" }
{ "name" : "Poemas Mário de Andrade" }
>

// upsert == parâmetro do update
db.books.update({name: 'Peter Jackson'}, {$set: { pages: 211 } }, {upsert: true})

no Update o upsert serve para inserir 
nMatched = 0 não encontrou então...
nUpserted = 1 => inseriu

 se não encontrar ou update 
> db.books.update({name: 'Peter Jackson'}, {$set: { pages: 211 } }, {upsert: true})
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 1,
        "nModified" : 0,
        "_id" : ObjectId("59eb5d1a5e069b227d35c726")
})


db.books.update({name: 'Peter Jackson'}, {$set: { pages: 212 } }, {upsert: true})
nMatched = 1 => encontrado
nModified = 1 => modificado

> db.books.update({name: 'Peter Jackson'}, {$set: { pages: 212 } }, {upsert: true})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

Modificado pages 212
> db.books.find({name: 'Peter Jackson'})
{ "_id" : ObjectId("59eb5d1a5e069b227d35c726"), "name" : "Peter Jackson", "pages" : 212 }
>

sort ... ordenar
> db.orders.find().sort({ _id: -1}).limit(1).pretty()
// sort desc com limit 1..., significa trazer o ultimo...

remove um registro:
> db.orders.remove( { _id: ObjectId('58d7062c489fd80004287f24') })
WriteResult({ "nRemoved" : 1 })

criando um índice de geolocalização, campo location
> db.orders.createIndex( { 'shippingAddress.location': '2dsphere' } )
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
>
order shippingAddress.location_2dsphere
> db.orders.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "novatec.orders"
        },
        {
                "v" : 2,
                "key" : {
                        "shippingAddress.location" : "2dsphere"
                },
                "name" : "shippingAddress.location_2dsphere",
                "ns" : "novatec.orders",
                "2dsphereIndexVersion" : 3
        }
]


apagando e recriando indexes
> db.orders.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "novatec.orders"
        },
        {
                "v" : 2,
                "key" : {
                        "shippingAddress.location" : "2dsphere"
                },
                "name" : "shippingAddress.location_2dsphere",
                "ns" : "novatec.orders",
                "2dsphereIndexVersion" : 3
        }
]
> db.orders.dropIndex('shippingAddress.location_2dsphere')
{ "nIndexesWas" : 2, "ok" : 1 }
> db.orders.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "novatec.orders"
        }
]
> db.orders.createIndex( {'shippingAddress.location': '2d' } )
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
>
$geoNear - geolocalização

query de busca com o índice e a geolocalização
db.orders.count({ 'shippingAddress.location': { $geoNear: [-23.5835924,-46.6889935], $maxDistance: 1 } }, { 'shippingAddress.location': 1, _id: 0})

